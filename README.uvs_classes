NOTE: The license for this code is provided in the top level file LICENSE.txt.

SUBJECT: Using the ParameterValidator and ParameterDefaults classes as bases
         for your own constructs.

Many of the UVS classes that are useful as bases for your own derived classes
support "parameter magic" which allows you to decode complex function parameters
trivalally by adding simple boiler plater to your own function.

class MySpecialClass < ParameterValidator

  # The defaults function calls all the way
  # down to the base class where it instantiates
  # an empty array.  As things return through
  # the call stack, each derived class is able to
  # load in its own defaults, and even override
  # the defaults of a parent when needed.
  #
  # What is returned at the top level is a
  # completely filled table of defaults.
  #
  # It should be noted that this is a class
  # function, and Java DOES NOT provide a
  # "this" pointer for class functions to call
  # the parent's version.  Thus you must
  # explicitly chain them as shown immediately
  # below.  This is a JVM limitation, not
  # a problem with mirah.
  #
  def self.defaults:HashMap
    # NOTE: Modify this to call the immediate
    # parent class's defaults function.
    defaults  = ParameterValidator.defaults

    # Add your default values as strings here.
    # Don't touch anything else.
    defaults.putAll({
        "my_variable"      => "my_value",
        "another_variable" => "another value"
        "something else"   => "__EMPTY__"
    })

    return defaults
  end

  # The disperse function is used to convert
  # the key/value pairs in the parameters array
  # and store them in class variables of the
  # correct data types.  The validation module
  # will take care of range checking, type
  # checking, etc.
  #
  # Even if you don't have anything to disperse,
  # you should implement this because @parms
  # IS NOT shared between the different layers
  # of the class inheritance chain.  Your
  # @parms is not related in any way to the
  # same in the base class.  It is a LOCAL
  # reference.  However, it is fine for each
  # of these references to point at the same
  # object, which is the major point of
  # the disperse function chaining through
  # all the layers of inherited stuff.
  #
  private def disperse_parms:HashMap
    @parms           = super

    # Add the variables you wish to load from the paramters
    # array here.
    @creation        = self.validate_long_field       "creation"
    @description     = self.validate_max_field_length "description" , self.MAX_DESCRIPTION_LENGTH
    @password        = self.validate_max_field_length "password"    , self.MAX_PASSWORD_LENGTH
    @timestamp       = self.validate_long_field       "timestamp"
    @title           = self.validate_max_field_length "title"       , self.MAX_TITLE_LENGTH

    return @parms
  end

  # These two init functions are the only ones you
  # need and should not be modified in any way.
  #
  # Put your real initialization in the disperse
  # function above where it will have full access
  # to the defaults and input parameters after
  # it has been inspected by all layers of parent
  # classes. 
  #
  # The base class has all the magic in its own
  # init implementation that builds up the defaults,
  # uses them to initialize the parameters list,
  # then overrides the values with validated input
  # from the supplied parms array.  Then finally
  # calls disperse to load those values into the
  # appropriate class variables.
  #
  # Thus you can invoke your class with a description
  # as opposed to having to know how the parameters
  # are laid out:
  #
  # TcpSocket.new {"ip_addr" => "192.168.2.1", "port" => "2332" }
  #
  def initialize
    super
  end

  def initialize (parms:HashMap)
    super parms
  end

  #
  # My own functions go here.
  #

end # Class
